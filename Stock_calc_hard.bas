Attribute VB_Name = "Module1"
Sub Stock_calc_hard()

Dim tic_id As String 'this is a variable for the stock ticker
Dim i As Double 'this is for the loop index its a double because some of these sheets are long
Dim lrow As Double 'this is going to be a variable to hold teh last row in the sheet
Dim stockno As Long ' this is going to tell the program how many novel stock tickers it has found for organizing results
Dim open_val As Double 'this is the opening value of a stock, 1st of the year
Dim closing_val As Double ' this is the closing value of a stock, end of the year
Dim yearly_chang As Double 'yearly change of a stock
Dim prcnt_yc As Double 'percent yearly change of a stock
Dim totvol As Double ' this variable will be the total volume of a stock
Dim lr2 As Long 'second lrow function specifically for the new table generated by the macro
Dim j As Long ' second index variable for the formatting for loop
Dim prcnt_max As Double ' this variable is going to be the max stock yearly change percent
Dim prcnt_min As Double ' Same as above but min
Dim totvol_max As Double ' Same as above but maximum total volume
Dim tvm_nm As String ' variable for the ticker of total volume
Dim pmax_nm As String ' variable for name of max percent increase
Dim pmin_nm As String ' variable for ticker of max percent decrease
Dim n As Long 'variable for the last for loop index
Dim m As Integer 'this variable is for the sheet loop
Dim sheet_count As Integer 'this variable is for counting the sheets in the workbook

sheet_count = ActiveWorkbook.Worksheets.Count 'count the worksheets and make that number sheet_count

For m = 1 To sheet_count


        stockno = 1 'no stocks have been processed, so value initialized to 1 so that the first ticker will print in row 2

    lrow = ActiveWorkbook.Worksheets(m).Cells(Rows.Count, 1).End(xlUp).Row 'finds the last row in this spreadsheet

    ActiveWorkbook.Worksheets(m).Cells(1, 9).Value = "Ticker" 'This section creates headings for the values to be calculated
    ActiveWorkbook.Worksheets(m).Cells(1, 10).Value = "Yearly Change"
    ActiveWorkbook.Worksheets(m).Cells(1, 11).Value = "% Yearly Change"
    ActiveWorkbook.Worksheets(m).Cells(1, 12).Value = "Total Volume"

    For i = 2 To lrow 'this lool structure will loop through all the rows with stocks

      Tick_id = ActiveWorkbook.Worksheets(m).Cells(i, 1).Value

       If Tick_id <> ActiveWorkbook.Worksheets(m).Cells(i - 1, 1).Value And ActiveWorkbook.Worksheets(m).Cells(i, 3) <> 0 Then 'instructions for a new stock and conditional added to prevent divide by zero
    
            stockno = stockno + 1 'this adds 1 to the stock number for index purposes
    
            ActiveWorkbook.Worksheets(m).Cells(stockno, 9) = Tick_id 'this creates a ticker entry for the new stock
    
            totvol = ActiveWorkbook.Worksheets(m).Cells(i, 7).Value 'This initializes the total volume as the volume on the first entry of a stock
    
            open_val = ActiveWorkbook.Worksheets(m).Cells(i, 3).Value 'This records the opening value on the first day of the stock

'The Elseif condition below was added becuse if zero values are rejected by the above condition, the new stock will not be reinitialized correctly.
'The elseif statement below will do the initialization procedure when the last "opening value" is zero and the present one isn't

        ElseIf ActiveWorkbook.Worksheets(m).Cells(i, 3) <> 0 And ActiveWorkbook.Worksheets(m).Cells(i - 1, 3) = 0 Then

            stockno = stockno + 1 'this adds 1 to the stock number for index purposes
    
            ActiveWorkbook.Worksheets(m).Cells(stockno, 9) = Tick_id 'this creates a ticker entry for the new stock
    
            totvol = ActiveWorkbook.Worksheets(m).Cells(i, 7).Value 'This initializes the total volume as the volume on the first entry of a stock
    
            open_val = ActiveWorkbook.Worksheets(m).Cells(i, 3).Value 'This records the opening value on the first day of the stock
    
        ElseIf Tick_id <> ActiveWorkbook.Worksheets(m).Cells(i + 1, 1).Value Then 'instructions for the last instance of a stock
    
             totvol = totvol + ActiveWorkbook.Worksheets(m).Cells(i, 7).Value 'this adds today's volume to the total
        
             ActiveWorkbook.Worksheets(m).Cells(stockno, 12).Value = totvol 'This prints the final total volume in the correct column
        
            closing_val = ActiveWorkbook.Worksheets(m).Cells(i, 6).Value 'sets the closing value on the last day of the stock
        
            yearly_chang = closing_val - open_val 'calculates the yearly change
        
            ActiveWorkbook.Worksheets(m).Cells(stockno, 10).Value = yearly_chang 'prints yearly change in the correct box
        
             prcnt_yc = (yearly_chang / open_val) 'change as a percent of the opening value
        
            ActiveWorkbook.Worksheets(m).Cells(stockno, 11) = prcnt_yc 'displays the above value in the correct place
    
        Else  'instructions for entries that are not the first or last instance.
    
             totvol = totvol + ActiveWorkbook.Worksheets(m).Cells(i, 7).Value

        End If


        Next i

'next part is the formatting section

    lr2 = ActiveWorkbook.Worksheets(m).Cells(Rows.Count, 9).End(xlUp).Row 'this will count in the 9th row where the ticker value is to give the rows of that table

    For j = 2 To lr2 'this loop will format the yearly change column

        If ActiveWorkbook.Worksheets(m).Cells(j, 10).Value > 0 Then
    
            ActiveWorkbook.Worksheets(m).Cells(j, 10).Interior.ColorIndex = 4 'this should color the cell green if it has a positive value
    
        Else
    
            ActiveWorkbook.Worksheets(m).Cells(j, 10).Interior.ColorIndex = 3 ' This should color the cell red if it has a negative or zero value
    
        End If


    Next j


    ActiveWorkbook.Worksheets(m).Range("K2:K" & lr2).NumberFormat = "0.00%"  'this formats the percent column as a percent rounded to two places
    'note: *100 value removed from percent formula because this format option
    'does that automatically. Ref(https://www.excelhowto.com/macros/formatting-a-range-of-cells-in-excel-vba/)


'this part of the code does the min and max calculations

    ActiveWorkbook.Worksheets(m).Cells(2, 14).Value = "Max % increase"
    ActiveWorkbook.Worksheets(m).Cells(3, 14).Value = "Max % decrease"
    ActiveWorkbook.Worksheets(m).Cells(4, 14).Value = "Max Total Volume"
    ActiveWorkbook.Worksheets(m).Cells(1, 15).Value = "Ticker"
    ActiveWorkbook.Worksheets(m).Cells(1, 16).Value = "Value"

'These functions are going to find the values required for the new table
'ref (https://www.wallstreetmojo.com/vba-max/)

    prcnt_max = WorksheetFunction.Max(ActiveWorkbook.Worksheets(m).Range("K2:K" & lr2))

    prcnt_min = WorksheetFunction.Min(ActiveWorkbook.Worksheets(m).Range("K2:K" & lr2))

    totvol_max = WorksheetFunction.Max(ActiveWorkbook.Worksheets(m).Range("L2:L" & lr2))

'this loop is going to find the ticker names

    For n = 2 To lr2

'this conditional checks if the %change matches the max or min and adds ticker to a variable if it does

        If ActiveWorkbook.Worksheets(m).Cells(n, 11) = prcnt_max Then
    
             pmax_nm = ActiveWorkbook.Worksheets(m).Cells(n, 9).Value
    
        ElseIf ActiveWorkbook.Worksheets(m).Cells(n, 11) = prcnt_min Then
    
             pmin_nm = ActiveWorkbook.Worksheets(m).Cells(n, 9).Value
    
         End If
    
'This conditional does the same for max volume

        If ActiveWorkbook.Worksheets(m).Cells(n, 12) = totvol_max Then
    
            tvm_nm = ActiveWorkbook.Worksheets(m).Cells(n, 9).Value
    
         End If

    Next n

'This section prints the findings

    ActiveWorkbook.Worksheets(m).Cells(2, 15).Value = pmax_nm
    ActiveWorkbook.Worksheets(m).Cells(3, 15).Value = pmin_nm
    ActiveWorkbook.Worksheets(m).Cells(4, 15).Value = tvm_nm
    ActiveWorkbook.Worksheets(m).Cells(2, 16).Value = prcnt_max
    ActiveWorkbook.Worksheets(m).Cells(3, 16).Value = prcnt_min
    ActiveWorkbook.Worksheets(m).Cells(4, 16).Value = totvol_max

'formatting for percents

    ActiveWorkbook.Worksheets(m).Range("P2:P3").NumberFormat = "0.00%"
    
Next m 'ends the worksheet loop

End Sub


